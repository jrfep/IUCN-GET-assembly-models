---
title: "Example visualisation of diagrammatic assembly models from the IUCN Global Ecosystem Typology"
author: JR Ferrer-Paris
format:
  pdf:
    toc: false
    number-sections: false
    colorlinks: true
---

# Set up

 Load libraries

```{r}
library(readr)
library(dplyr)
library(igraph)
```

# Read data 

First locate the downloaded csv file.

Either using an absolute path
```{r}
#| eval: false
input_csv_file <- "~/Downloads/dam_components_freshwater_results.csv"
```

```{r}
#| code-fold: true
#| code-summary: "Or use `here` to find the path to the file relative to the project folder"
here::i_am("examples/DAM-graph-freshwater.qmd")
input_csv_file <-
    here::here("sandbox", "dam_components_freshwater_results.csv")
```

 I use the `read_csv` function from the `readr` package:  

```{r}
dam_data <- read_csv(input_csv_file)
```

We can take a look at the data:
```{r}
glimpse(dam_data)
```

# Create a graph

I use `igraph` to create a graph with all the data from the table:

- First I select the nodes (functional groups or EFGs and variables)
- Then I select the links from EFG to variables
- I put it all together in a graph object

```{r}
nodes <- dam_data %>% 
    transmute(id=code, name=code, class="EFG") %>% 
    bind_rows(dam_data %>% transmute(id=variable, name=variable, class="vars")) %>%
    unique

links <- dam_data %>% 
    transmute(from=code, to=variable)

nodes <- nodes %>% filter(id %in% links$from | id %in% links$to)
links <- links %>% filter(from %in% nodes$id & to %in% nodes$id)

g <- graph_from_data_frame(links,nodes,directed=F)

```

## Modify attributes for plotting

Now we change some attributes for visualisation

```{r}
colrC <- c(EFG="orange",vars="skyblue")
V(g)$color<- colrC[V(g)$class]
V(g)$label <- ifelse(V(g)$class %in% c("EFG"), V(g)$name, NA)
#change arrow size and edge color:
E(g)$arrow.size <- .2
E(g)$edge.color <- "gray80"
V(g)$size <- 3
V(g)$size[V(g)$class %in% "EFG"] <- 6
```

## Complete graph with all components

This is the plot of all EFGs and variables, I omitted the variable name for now. There are lots of variables that are used only once (blue circles in the periphery of the graph):

```{r}
#| fig-width: 10
#| fig-height: 10
l <- layout_with_kk(g)
#l <- layout_with_fr(g)
plot(g, layout=l,vertex.label.cex=.5)
```

## Examples of filtering 
We can use the igraph functions to create a subgraph based on a selection of components, either variables or functional groups.

### More frequent variables

For example, consider only variables connected to many functional groups, I will use a degree of 10 as a threshold, then I restore the names for the nodes and increase the node size:

```{r}
#| fig-width: 10
#| fig-height: 10
sg <- subgraph(g, which(degree(g) > 10))
V(sg)$label <- V(sg)$name
V(sg)$size <- 12
plot(sg)
```

### Selection of groups
Here another example where I focus on just a selection of groups. Notice I use here the subgraph function twice, first to select the selected groups and  all variables and then to delete the disconnected nodes: 

```{r}
#| fig-width: 10
#| fig-height: 10
f1 <- c("F1.1","F1.2","F1.3","F1.4", "F1.5", "TF1.3")
sg <- subgraph(g, V(g)$name %in% f1 | V(g)$class  %in% "vars")
sg <- subgraph(sg,which(degree(sg) > 1))
V(sg)$label <- V(sg)$name
V(sg)$size <- 12
    
plot(sg)
```

Now we can go back to the table with all the information and read the original names used for each component:

```{r}
filtered_table <- dam_data %>% 
    filter(code %in% V(sg)$name, variable %in% V(sg)$name) %>% 
    select(code,component_class,component_name)
```

We can now explore this filtered table:

```{r}
head(filtered_table)
```

# Session Info

```{r}
#| fold-code: true
sessionInfo()
```
